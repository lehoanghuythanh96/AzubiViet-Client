import { BlackListEntity } from 'src/models/blacklist/blacklist.entity';
import { AppCache } from 'src/models/cacheKeys/cacheKeys.entity';
import { GuestQAndAEntity } from 'src/models/GuestQAndA/GuestQAndA.entity';
import { LevelTableEntity } from 'src/models/leveltable/leveltable.entity';
import { MediaListEntity } from 'src/models/media/media.entity';
import { PostEntity } from 'src/models/post/post.entity';
import { QuestionMarket_UserAnswerEntity } from 'src/models/QuestionMarket_UserAnswer/questionmarket_useranswer.entity';
import { ReportLoggerEntity, ReportLoggerTypes } from 'src/models/reportLogger/reportlogger.entity';
import { UserAnswerReviewEntity } from 'src/models/useranswer_review/useranswer_review.entity';
import { UserEntity } from 'src/models/userauthentication/userauth.entity';
import { UserInventoryEntity } from 'src/models/userinventory/userinventory.entity';
import { UserNotificationEntity, UserNotificationInput } from 'src/models/usernotifications/usernotifications.entity';
import { UserPrivateMessageEntity, UserPrivateMessageInput } from 'src/models/userprivatemessage/userprivatemessage.entity';
import { Repository } from 'typeorm';
export declare class UserAuthenticationService {
    private readonly userrepository;
    private readonly mediarepository;
    private readonly usernotificationrepository;
    private readonly leveltableRepository;
    private readonly postEntityRepository;
    private readonly reportLoggerRepository;
    private readonly userPrivatemessageRepository;
    private readonly questionMarketUseranswerRepository;
    private readonly userAnswerReviewRepository;
    private readonly guestQandARepository;
    private readonly blackListRepository;
    private readonly userInventoryRepository;
    private cacheManager;
    constructor(userrepository: Repository<UserEntity>, mediarepository: Repository<MediaListEntity>, usernotificationrepository: Repository<UserNotificationEntity>, leveltableRepository: Repository<LevelTableEntity>, postEntityRepository: Repository<PostEntity>, reportLoggerRepository: Repository<ReportLoggerEntity>, userPrivatemessageRepository: Repository<UserPrivateMessageEntity>, questionMarketUseranswerRepository: Repository<QuestionMarket_UserAnswerEntity>, userAnswerReviewRepository: Repository<UserAnswerReviewEntity>, guestQandARepository: Repository<GuestQAndAEntity>, blackListRepository: Repository<BlackListEntity>, userInventoryRepository: Repository<UserInventoryEntity>, cacheManager: AppCache);
    getallusers(): Promise<UserEntity[]>;
    finduserbyEmail(email: string | undefined): Promise<UserEntity>;
    getalluseravatar(): Promise<MediaListEntity[]>;
    getallusernotifications(): Promise<UserNotificationEntity[]>;
    getallReportLogger(): Promise<ReportLoggerEntity[]>;
    getAllLevelPoints(): Promise<LevelTableEntity[]>;
    getAllUserPrivateMessages(): Promise<UserPrivateMessageEntity[]>;
    deleteSingleNotiByID(noti_ID: number, user_id: number): Promise<number>;
    createSingleNoti(input: UserNotificationInput): Promise<void>;
    punishUserByPoint(point_numbers: number, user_id: number): Promise<void>;
    finishReportLogger(item_ID: number, item_type: ReportLoggerTypes): Promise<void>;
    blockAllUserPost(user_ID: number): Promise<void>;
    unblockAllUserPost(user_ID: number): Promise<void>;
    getAllblackListItems(): Promise<BlackListEntity[]>;
    getAll_UserInventories(): Promise<UserInventoryEntity[]>;
    sendprivateMsgtoUser(target_ID: number, sender_ID: number, msgItem: UserPrivateMessageInput): Promise<void>;
}
